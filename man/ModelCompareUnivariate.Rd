% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ModelCompareUnivariate.R
\docType{data}
\name{ModelCompareUnivariate}
\alias{ModelCompareUnivariate}
\title{R6 class ModelCompareUnivariate}
\format{An object of class \code{R6ClassGenerator} of length 24.}
\usage{
ModelCompareUnivariate$new(x = airlog, mdl_list = models,
                           n.ahead = 36, batch_size = 72)
}
\arguments{
\item{x}{Time Series Realization}

\item{mdl_list}{A names list of all models (see format below)}

\item{n.ahead}{The number of observations used to calculate ASE or forecast ahead}

\item{batch_size}{If any of the models used sliding ase method,
then this number indicates the batch size to use}
}
\value{
A new `ModelCompareUnivariate` object.
}
\description{
Initialize an object to compare several Univatiate Time Series Models
}
\examples{
library(tswge)
data("airlog")

# Woodward Gray Airline Model
phi_wg = c(-0.36, -0.05, -0.14, -0.11, 0.04, 0.09, -0.02, 0.02, 0.17, 0.03, -0.10, -0.38)
d_wg = 1
s_wg = 12

# Parzen Model
phi_pz = c(0.74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.38, -0.2812)
s_pz = 12

# Box Model
d_bx = 1
s_bx = 12  
theta_bx =  c(0.40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.60, -0.24)

models = list("Woodward Gray Model A" = list(phi = phi_wg, d = d_wg, s = s_wg, sliding_ase = FALSE),
              "Woodward Gray Model B" = list(phi = phi_wg, d = d_wg, s = s_wg, sliding_ase = TRUE),
              "Parzen Model A" = list(phi = phi_pz, s = s_pz, sliding_ase = FALSE),
              "Parzen Model B" = list(phi = phi_pz, s = s_pz, sliding_ase = TRUE),
              "Box Model A" = list(theta = theta_bx, d = d_bx, s = s_bx, sliding_ase = FALSE),
              "Box Model B" = list(theta = theta_bx, d = d_bx, s = s_bx, sliding_ase = TRUE)
              )
              
mdl_compare = ModelCompareUnivariate$new(x = airlog, mdl_list = models,
                                         n.ahead = 36, batch_size = 72)
# Plots the historgam of the ASE values for each model.
# This is especially useful when models using a sliding window for ASE calculations. 
mdl_compare$plot_histogram_ases()

# The following method gives 2 plots
# (1) Plots the forecasts for each model along with the realization.
# (2) Plots the upper and lower limits for each model along with the realization.
# In both cases, this marks each batch using a background color for ease of comparison.
# only_sliding = TRUE will only plot forecsts for models using sliding ASE  calculations.
mdl_compare$plot_forecasts(only_sliding = TRUE)

# This method statistically compares all the models that use a sliding window ASE calculation
mdl_compare$statistical_compare()  

ASEs = mdl_compare$get_tabular_metrics(ases = TRUE)
print(ASEs)

# This method returns the metrics (ASE values) or forecasts for each model
# 'only_sliding' If set to TRUE, only the models that use a sliding window 
#                ASE calculation will be returned
# 'ases' If set to TRUE, this method will return the ASE value(s) 
#        Single value for models that don't use sliding ASEs and 
#        Multiple values (one per batch) for models that use sliding window
#        ASE calculations
#        If set to FALSE, this function will return the model forecasts and 
#        upper and lower confidence intervals. 
forecasts = mdl_compare$get_tabular_metrics(ases = FALSE)
print(forecasts)

}
\keyword{datasets}
